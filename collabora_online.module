<?php

/*
 * Copyright the Collabora Online contributors.
 *
 * SPDX-License-Identifier: MPL-2.0
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

use Drupal\collabora_online\Cool\CoolUtils;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_theme().
 *
 * Register a module or theme's theme implementations.  The
 * implementations declared by this hook specify how a particular
 * render array is to be rendered as HTML.
 *
 * See:
 * https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme
 *
 * If you change this method, clear theme registry and routing table
 * 'drush cc theme-registry' and 'drush cc router'.
 */
function collabora_online_theme($existing, $type, $theme, $path) {

  return [
      'collabora_online' => [
          'render element' => 'children',
          'template' => 'collabora-online',
          'variables' => [
              'accessToken' => 'test',
              'accessTokenTtl' => '86400',
              'iFrameStyle' => 'width:95%;',
              'closebutton' => '',
              'allowfullscreen' => '',
              'wopiSrc' => 'http://localhost:9980/',
              'wopiClient' => 'https://localhost:9980/',
          ],
      ],
      // This is the template for the field preview.
      'collabora_online_preview' => [
          'render element' => 'children',
          'template' => 'collabora-online-preview',
          'variables' => [
              'editorUrl' => 'about:blank',
              'fileName' => '',
          ],
      ],
      // This is the template for the complete page with embedding.
      'collabora_online_full' => [
          'template' => 'collabora-online-full',
          'variables' => [
              'accessToken' => 'test',
              'accessTokenTtl' => '86400',
              'iFrameStyle' => '',
              'closebutton' => '',
              'allowfullscreen' => '',
              'wopiSrc' => '/wopi/files/123',
              'wopiClient' => 'https://localhost:9980/',
          ],
          'file' => 'collabora_online.theme.inc',
      ],
  ];
}

/**
 * Implements hook_entity_operation().
 *
 * This is used to add the menu entry in the Media content to
 * open the viewer/editor directly.
 */
function collabora_online_entity_operation(EntityInterface $entity) {
    if (($entity->getEntityTypeId() != "media") ||
        ($entity->getSource()->getPluginId() != "file")) {
        return [];
    }

    /** @var \Drupal\media\MediaInterface $media */
    $media = $entity;

    if (!$media->access('preview in collabora')) {
        return [];
    }

    $file = CoolUtils::getFile($media);
    $type = CoolUtils::getDocumentType($file);

    if ($type == NULL) {
        return [];
    }

    $entries = [
        'collabora_online_view' => [
            'title' => t("View in Collabora Online"),
            'weight' => 50,
            'url' => CoolUtils::getEditorUrl($media, FALSE),
        ],
    ];

    if (CoolUtils::canEdit($file) && $media->access('edit in collabora')) {
        $entries['collabora_online_edit'] = [
            'title' => t("Edit in Collabora Online"),
            'weight' => 50,
            'url' => CoolUtils::getEditorUrl($media, TRUE),
        ];
    }

    return $entries;
}

/**
 * Implements hook_ENTITY_TYPE_access() for 'media'.
 *
 * Checks access for the new media operations provided by this module.
 */
function collabora_online_media_access(MediaInterface $media, string $operation, AccountInterface $account): AccessResultInterface {
    $type = $media->bundle();
    switch ($operation) {
        case 'preview in collabora':
            if ($media->isPublished()) {
                return AccessResult::allowedIfHasPermission($account, "preview $type in collabora")
                    ->addCacheableDependency($media);
            }
            $preview_own_permission = "preview own unpublished $type in collabora";
            $access_result = AccessResult::allowedIfHasPermission($account, $preview_own_permission)
                ->addCacheableDependency($media);
            if (!$access_result->isAllowed()) {
                return $access_result;
            }
            // Use '==' because Drupal sometimes loads integers as strings.
            $is_owner = ($account->id() && $account->id() == $media->getOwnerId());
            if ($is_owner) {
                $access_result = AccessResult::allowed();
            }
            else {
                $access_result = AccessResult::neutral()
                    ->setReason("The user has the '$preview_own_permission' permission, but is not the owner of the media item.");
            }
            return $access_result
                ->cachePerUser()
                ->addCacheableDependency($media);

        case 'edit in collabora':
            if ($account->hasPermission("edit any $type in collabora")) {
                return AccessResult::allowed()
                    ->cachePerPermissions();
            }
            $edit_own_permission = "edit own $type in collabora";
            $access_result = AccessResult::allowedIfHasPermission($account, $edit_own_permission);
            if (!$access_result->isAllowed()) {
                return $access_result;
            }
            // Use '==' because Drupal sometimes loads integers as strings.
            $is_owner = ($account->id() && $account->id() == $media->getOwnerId());
            if (!$is_owner) {
                $access_result = AccessResult::neutral()
                    ->setReason("The user has the '$edit_own_permission' permission, but is not the owner of the media item.");
            }
            else {
                $access_result = AccessResult::allowed();
            }
            return $access_result
                ->cachePerUser()
                ->addCacheableDependency($media);

        default:
            return AccessResult::neutral();
    }
}
